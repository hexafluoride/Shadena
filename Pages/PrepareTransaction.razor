@page "/PrepareTransaction"
@using System.Text.Json
@using System.Timers

@inject IAccountsManager _accountsManager
@inject PactHttpClient _pactClient
@inject IJSRuntime JS


<div class="container">

    <h3>Prepare transaction</h3>
    <div class="row">
        <div class="col-xl-8" id="code-outer">
            
            <div class="mb-3">
                <div id="code-container" style="height:80vh; border:1px solid #cccccc;"></div>
            </div>
            
            <div class="mb-3">
                <h4>Signers</h4>
                <SignersControl Signers="@cmdModel.Command.Signers" SignersChanged="@(() => FieldChanged(null, null))"></SignersControl>
            </div>
        </div>
        <div class="col-xl-4 @(inputEnabled ? "" : "loadingQuick")">
            <div class="mb-3">
                <textarea class="form-control" style="font-family: monospace; min-height:25vh; background-color: #fefefe;" readonly="readonly" @bind="resultsText"></textarea>
            </div>
            
            <EditForm EditContext="editContext">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="mb-3">
                    <div class="row">
                        <div class="col">
                            <button class="btn btn-primary" type="button" @onclick="PreviewTransaction"><span class="oi oi-check" aria-hidden="true"></span> Preview</button>
                        </div>
                        <div class="col">
                            <button class="btn btn-success" type="button" @onclick="SendTransaction"><span class="oi oi-check" aria-hidden="true"></span> Send</button>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label>Transaction hash <span class="fas fa-info-circle fa-xs" style="opacity:0.8;" data-bs-trigger="hover focus click" data-bs-toggle="tooltip" data-bs-placement="top" 
                                                  title="Sign this value. Click to copy into clipboard."></span></label>
                    <input class="form-control font-monospace" id="tx-hash" type="text" readonly="readonly" @bind="cmdModel.Hash" onclick="navigator.clipboard.writeText(document.getElementById('tx-hash').value)" />
                </div>
                
                <div class="mb-3">
                    <label>Signatures <span class="fas fa-info-circle fa-xs" style="opacity:0.8;" data-bs-trigger="hover focus click" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" 
                                            title="For each signer, provide a signature of the transaction hash. <span class='font-monospace'>pact sign</span> is one way to obtain a signature."></span></label>
                    
                    @{
                        if (!cmdModel.Command.Signers.Any())
                        {
                            <p><small>No signers have been added yet.</small></p>
                        }
                        int i = 0;
                        foreach (var signer in cmdModel.Command.Signers)
                        {
                            var signerIndex = i++;
                            <InputText class="form-control" @bind-Value="cmdModel.Signatures[signerIndex].Signature" placeholder="@($"Signature from {signer.PubKey}")"/>
                        }
                    }
                </div>
                
                <div class="mb-3">
                    <label>Sender</label>
                    <InputText class="form-control" list="registered-accounts" @bind-Value="cmdModel.Command.Metadata.Sender"/>
                    
                    <datalist id="registered-accounts">
                        @foreach (var account in accounts)
                        {
                            <option value="@account.Name" />
                        }
                    </datalist>
                </div>
                <div class="mb-3">
                    <label>Chain</label>
                    <InputSelect class="form-select" @bind-Value="cmdModel.Command.Metadata.ChainId">
                        @foreach (var chain in _pactClient.RecognizedChains)
                        {
                            <option value="@chain">@chain</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <div class="row">
                        <div class="col">
                            <label>Gas limit</label>
                            <InputNumber class="form-control" placeholder="1500" aria-label="Gas limit" @bind-Value="cmdModel.Command.Metadata.GasLimit"/>
                        </div>
                        <div class="col">
                            <lable>Gas price</lable>
                            <InputNumber class="form-control" placeholder="0.00001" aria-label="Gas price" @bind-Value="cmdModel.Command.Metadata.GasPrice"/>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="row">
                        <div class="col">
                            <label>Time to live</label>
                            <InputNumber class="form-control" placeholder="3600" aria-label="Time to live" @bind-Value="cmdModel.Command.Metadata.Ttl"/>
                        </div>
                        <div class="col">
                            <lable>Creation time</lable>
                            <InputNumber class="form-control" aria-label="Creation time" @bind-Value="cmdModel.Command.Metadata.CreationTime"/>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <h4>Message data</h4>
                    <TransactionDataControl Transaction="cmdModel.Command" DataChanged="Synchronize"/>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    protected PactCommand cmdModel { get; set; }
    EditContext editContext;

    List<AccountIdentifier> accounts = new();

    bool inputEnabled = true;
    string resultsText = "Execution result will appear here.";
    Timer timer;

    JsonSerializerOptions humanReadableSerializationOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web)
    {
        WriteIndented = true
    };
    
    protected override async Task OnInitializedAsync()
    {
        cmdModel = _pactClient.BuildCommand(_pactClient.GenerateExecCommand("0", "(+ 1 2)"));
        editContext = new EditContext(cmdModel);
        
        editContext.OnFieldChanged += FieldChanged;
        
        accounts = (await _accountsManager.GetAccountsRegisteredAsync()).ToList();
        await JS.InvokeVoidAsync("window.initializeEditor");
        await JS.InvokeVoidAsync("window.initTooltips");

        timer = new System.Timers.Timer();
        timer.Interval = 1000;
        timer.Elapsed += async (s, e) => CheckForNewCode();
        timer.Enabled = true;
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        Synchronize();
    }

    private async Task CheckForNewCode()
    {
        var editorCode = await JS.InvokeAsync<string>("window.editorContext.editor.getValue");

        if (cmdModel.Command.Payload.Exec.Code != editorCode)
        {
            cmdModel.Command.Payload.Exec.Code = editorCode;
            Synchronize();
        }
    }

    private void SynchronizeSignatures()
    {
        if (cmdModel.Command.Signers.Count == cmdModel.Signatures.Length)
            return;
        
        var newSigs = new PactSignature[cmdModel.Command.Signers.Count];

        for (int i = 0; i < newSigs.Length; i++)
            newSigs[i] = new PactSignature();

        for (int i = 0; i < Math.Min(newSigs.Length, cmdModel.Signatures.Length); i++)
            newSigs[i] = cmdModel.Signatures[i];

        cmdModel.Signatures = newSigs;
    }

    private async Task Synchronize()
    {
        SynchronizeSignatures();
        cmdModel.UpdateHash();
    }

    protected async Task SendTransaction()
    {
        inputEnabled = false;
        StateHasChanged();

        Synchronize();
        var resp = await _pactClient.SendTransactionAsync(cmdModel);

        resultsText = resp;
        StateHasChanged();

        inputEnabled = true;
        StateHasChanged();
        
    }

    protected async Task PreviewTransaction()
    {
        inputEnabled = false;
        StateHasChanged();

        Synchronize();
        
        var resp = await _pactClient.ExecuteLocalAsync(cmdModel);

        if (resp == null)
        {
            resultsText = "Execution returned null.";
        }
        else
        {
            if (resp.Result.Status != "success")
            {
                resultsText = $"Execution was unsuccessful.\n" +
                              resp.Result.Error.Message + "\n" +
                              resp.Result.Error.Info + "\n" +
                              string.Join('\n', resp.Result.Error.CallStack) + "\n" +
                              resp.Result.Error.Type;
            }
            else
            {
                resultsText = JsonSerializer.Serialize(resp.Result.Data, humanReadableSerializationOptions);
            }
        }
        StateHasChanged();

        inputEnabled = true;
        StateHasChanged();
    }
}