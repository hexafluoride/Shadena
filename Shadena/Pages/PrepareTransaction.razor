@page "/"
@page "/PrepareTransaction"
@page "/PrepareTransaction/{chainId}/{requestKey?}"

@using System.Text.Json
@using System.Text.Json.Nodes
@using System.Timers
@using Microsoft.AspNetCore.Components
@using PactSharp
@using PactSharp.Services
@using PactSharp.Types

@inject IChainwebQueryService _chainwebQueryService
@inject IAccountsManager _accountsManager
@inject PactClient _pactClient
@inject IJSRuntime JS

<div class="offcanvas offcanvas-end" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-2" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
    <div class="offcanvas-header">
        <h5 id="offcanvasRightLabel">Transaction result</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <TransactionResultView Command="@_sentCommand" ReferenceType="TransactionResultView.TransactionReference.SentCommand"></TransactionResultView>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="export-modal" tabindex="-1" aria-labelledby="export-modal-label" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="export-modal-label">Import and export</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <div class="modal-body">
            <ul class="nav nav-tabs" id="import-export-selector" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="export-tab" data-bs-toggle="tab" data-bs-target="#export-transaction" type="button" role="tab" aria-controls="export-transaction" aria-selected="true">Export</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="import-tab" data-bs-toggle="tab" data-bs-target="#import-transaction" type="button" role="tab" aria-controls="import-transaction" aria-selected="false">Import</button>
                </li>
            </ul>
            <div class="tab-content" id="import-export-selector-content">
                <div class="tab-pane fade show active" id="export-transaction" role="tabpanel" aria-labelledby="export-tab">
                    <ul class="nav nav-tabs" id="export-type-selector" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="json-local-tab" data-bs-toggle="tab" data-bs-target="#export-json-local" type="button" role="tab" aria-controls="json-local" aria-selected="true">JSON for /local</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="json-send-tab" data-bs-toggle="tab" data-bs-target="#export-json-send" type="button" role="tab" aria-controls="json-send" aria-selected="false">JSON for /send</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="yaml-tab" data-bs-toggle="tab" data-bs-target="#export-yaml" type="button" role="tab" aria-controls="export-yaml" aria-selected="false">YAML</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="export-tab-content">
                        <div class="tab-pane fade show active" id="export-json-local" role="tabpanel" aria-labelledby="json-local-tab">
                            <textarea class="form-control code-textarea" readonly="readonly" @bind="cmdModel.JsonEncodedForLocal">
                        </textarea>
                        </div>
                        <div class="tab-pane fade" id="export-json-send" role="tabpanel" aria-labelledby="json-send-tab">
                            <textarea class="form-control code-textarea" readonly="readonly" @bind="cmdModel.JsonEncodedForSend">
                        </textarea>
                        </div>
                        <div class="tab-pane fade" id="export-yaml" role="tabpanel" aria-labelledby="yaml-tab">
                            <textarea class="form-control code-textarea" readonly="readonly" @bind="cmdModel.YamlEncoded">                
                        </textarea>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade show" id="import-transaction" role="tabpanel" aria-labelledby="import-tab">
                    <ul class="nav nav-tabs" id="import-type-selector" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="import-json-tab" data-bs-toggle="tab" data-bs-target="#import-json" type="button" role="tab" aria-controls="import-json" aria-selected="true">JSON</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="import-yaml-tab" data-bs-toggle="tab" data-bs-target="#import-yaml" type="button" role="tab" aria-controls="import-yaml" aria-selected="false">YAML</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="import-from-tx-tab" data-bs-toggle="tab" data-bs-target="#import-from-tx" type="button" role="tab" aria-controls="import-from-tx" aria-selected="false">Request key</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="import-tab-content">
                        <div class="tab-pane fade show active" id="import-json" role="tabpanel" aria-labelledby="import-json-tab">
                            <div class="mb-3">
                                <textarea class="form-control" style="" @bind="@Import.Json">
                                </textarea>
                            </div>
                            <div class="mb-3">
                                <button class="btn btn-success" type="button" @onclick="@(async () => await ImportAsync(ImportType.Json))"><span class="oi oi-account-login" aria-hidden="true"></span> Import</button>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="import-yaml" role="tabpanel" aria-labelledby="import-yaml-tab">
                            <div class="mb-3">
                                <textarea class="form-control code-textarea" @bind="@Import.Yaml">
                                </textarea>
                            </div>
                            <div class="mb-3">
                                <button class="btn btn-success" type="button" @onclick="@(async () => await ImportAsync(ImportType.Yaml))"><span class="oi oi-account-login" aria-hidden="true"></span> Import</button>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="import-from-tx" role="tabpanel" aria-labelledby="import-from-tx-tab">
                            <div class="mb-3">
                                <label>Chain</label>
                                <select class="form-select" @bind="@Import.ChainId">
                                    @foreach (var chain in _pactClient.RecognizedChains)
                                    {
                                        <option value="@chain">@chain</option>
                                    }
                                </select>
                            </div>
                            <div class="mb-3">
                                <label>Request key</label>
                                <input type="text" class="form-control" placeholder="" aria-label="Request key" @bind="@Import.RequestKey"/>
                            </div>
                            <div class="mb-3">
                                <button class="btn btn-success" type="button" @onclick="@(async () => await ImportAsync(ImportType.RequestKey))"><span class="oi oi-account-login" aria-hidden="true"></span> Import</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="container">

    <h3>Prepare transaction</h3>
    <div class="row">
        <div class="col-xl-8" id="code-outer">
            
            <div class="mb-3">
                <div id="code-container" style="height:80vh;"></div>
            </div>
            
            <div class="mb-3">
                <h4>Signers</h4>
                <SignersControl Signers="@cmdModel.Command.Signers" SignersChanged="@(() => FieldChanged(null, null))"></SignersControl>
            </div>
        </div>
        <div class="col-xl-4 @(inputEnabled ? "" : "loadingQuick")">
            <div class="mb-3">
                <textarea class="form-control code-textarea" style="min-height: 25vh;" readonly="readonly" @bind="resultsText"></textarea>
            </div>
            
            <EditForm EditContext="editContext">
                <DataAnnotationsValidator/>
                <ValidationSummary/>

                <div class="mb-3">
                    <button class="btn btn-primary" type="button" @onclick="PreviewTransaction"><span class="oi oi-check" aria-hidden="true"></span> Preview</button>
                
                    <button class="btn btn-success" type="button" @onclick="SendTransaction"><span class="oi oi-check" aria-hidden="true"></span> Send</button>
          
                    <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#export-modal">
                        <span class="oi oi-document"></span> Import/Export
                    </button>
                
                    <button class="btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">Show transaction result</button>

                </div>
                <div class="mb-3">
                    <label>Transaction hash <span class="fas fa-info-circle fa-xs" style="opacity:0.8;" data-bs-trigger="hover focus click" data-bs-toggle="tooltip" data-bs-placement="top" 
                                                  title="Sign this value. Click to copy into clipboard."></span></label>
                    <input class="form-control font-monospace" style="cursor:grab;" id="tx-hash" type="text" readonly="readonly" @bind="cmdModel.Hash" data-bs-toggle="tooltip" data-bs-placement="top" title="Copied!" data-bs-trigger="manual" 
                           onclick="navigator.clipboard.writeText(document.getElementById('tx-hash').value); 
                           bootstrap.Tooltip.getInstance(document.getElementById('tx-hash')).show();
                           setTimeout(function () { bootstrap.Tooltip.getInstance(document.getElementById('tx-hash')).hide(); }, 1000);" />
                </div>
                
                <div class="mb-3">
                    <SignaturesControl Transaction="cmdModel" SignaturesChanged="@(async () => await Synchronize())" @bind-SigningKeypairs="signingKeypairs" />
                </div>
                
                <div class="mb-3">
                    <label>Sender</label>
                    <InputText class="form-control" list="registered-accounts" @bind-Value="cmdModel.Command.Metadata.Sender"/>
                    
                    <datalist id="registered-accounts">
                        @foreach (var account in accounts)
                        {
                            <option value="@account.Name" />
                        }
                    </datalist>
                </div>
                <div class="mb-3">
                    <label>Chain</label>
                    <InputSelect class="form-select" @bind-Value="cmdModel.Command.Metadata.ChainId">
                        @foreach (var chain in _pactClient.RecognizedChains)
                        {
                            <option value="@chain">@chain</option>
                        }
                    </InputSelect>
                </div>
                <div class="mb-3">
                    <div class="row">
                        <div class="col">
                            <label>Gas limit</label>
                            <InputNumber class="form-control" placeholder="1500" aria-label="Gas limit" @bind-Value="cmdModel.Command.Metadata.GasLimit"/>
                        </div>
                        <div class="col">
                            <lable>Gas price</lable>
                            <InputNumber class="form-control" placeholder="0.00001" aria-label="Gas price" @bind-Value="cmdModel.Command.Metadata.GasPrice"/>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <div class="row">
                        <div class="col">
                            <label>Time to live</label>
                            <InputNumber class="form-control" placeholder="3600" aria-label="Time to live" @bind-Value="cmdModel.Command.Metadata.Ttl"/>
                        </div>
                        <div class="col">
                            <lable>Creation time</lable>
                            <InputNumber class="form-control" aria-label="Creation time" @bind-Value="cmdModel.Command.Metadata.CreationTime"/>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <h4>Message data</h4>
                    <TransactionDataControl Transaction="cmdModel.Command" DataChanged="Synchronize"/>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string requestKey { get; set; }
    
    [Parameter]
    public string chainId { get; set; }
    
    protected PactCommand cmdModel { get; set; }
    EditContext editContext;

    List<AccountIdentifier> accounts = new();

    bool inputEnabled = true;
    string resultsText = "Execution result will appear here.";
    Timer timer;

    PactKeypair[] signingKeypairs = Array.Empty<PactKeypair>();

    JsonSerializerOptions humanReadableSerializationOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web)
    {
        WriteIndented = true
    };

    PactCommand _sentCommand;

    bool _editorInitialized = false;

    ImportModel Import { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        cmdModel = _pactClient.BuildCommand(_pactClient.GenerateExecCommand("0", "(+ 1 2)"));
        
        if (!_editorInitialized)
        {
            editContext = new EditContext(cmdModel);
            editContext.OnFieldChanged += FieldChanged;
            
            await JS.InvokeVoidAsync("window.initializeEditor");
            await JS.InvokeVoidAsync("window.initTooltips");

            _editorInitialized = true;
        }
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(requestKey) && !string.IsNullOrWhiteSpace(chainId))
        {
            Import.RequestKey = requestKey;
            Import.ChainId = chainId;
            await ImportAsync(ImportType.RequestKey);
        }
        else
        {
            cmdModel = _pactClient.BuildCommand(_pactClient.GenerateExecCommand("0", "(+ 1 2)"));
        }
        
        accounts = (await _accountsManager.GetAccountsRegisteredAsync()).ToList();

        if (timer == null)
        {
            timer = new System.Timers.Timer();
            timer.Interval = 1000;
            timer.Elapsed += async (s, e) => { await CheckForNewCode(); };
            timer.Enabled = true;
        }
    }

    private async Task<PactCommand> RecoverFromJson(string json)
    {
        var parsedObject = JsonNode.Parse(json).AsObject();

        if (parsedObject.ContainsKey("cmds"))
        {
            var command = parsedObject["cmds"][0].Deserialize<PactCommand>(PactClient.PactJsonOptions);
            command.SetCommand(command.CommandEncoded);
            return command;
        }
        if (parsedObject.ContainsKey("hash"))
        {
            var command = parsedObject.Deserialize<PactCommand>(PactClient.PactJsonOptions);
            command.SetCommand(command.CommandEncoded);
            return command;
        }
        if (parsedObject.ContainsKey("nonce"))
        {
            var cmd = parsedObject.Deserialize<PactCmd>(PactClient.PactJsonOptions);
            var command = _pactClient.BuildCommand(cmd);
            return command;
        }

        return null;
    }

    private async Task ImportAsync(ImportType type)
    {
        Console.WriteLine($"Importing tx type {type}");
        
        switch (type)
        {
            case ImportType.Json:
                cmdModel = await RecoverFromJson(Import.Json);
                break;
            case ImportType.RequestKey:
                cmdModel = await _chainwebQueryService.FetchTransactionAsync(Import.ChainId, Import.RequestKey);
                break;
            case ImportType.Yaml:
                cmdModel = _pactClient.BuildCommand(PactCmd.YamlDeserializer.Deserialize<PactCmd>(Import.Yaml));
                break;
        }
        
        if (cmdModel != null && cmdModel.Command.NetworkId != _pactClient.NetworkId)
        {
            await JS.InvokeVoidAsync("alert", $"This transaction is for network \"{cmdModel.Command.NetworkId}\", but you are on network \"{_pactClient.NetworkId}\". Please change your active network in the Settings page and reload Shadena.");
            cmdModel = null;
        }

        if (cmdModel == null)
        {
            await JS.InvokeVoidAsync("alert", "Import failed.");
            cmdModel = _pactClient.BuildCommand(_pactClient.GenerateExecCommand("0", "(+ 1 2)"));
        }
        else
        {
            
            if (string.IsNullOrWhiteSpace(cmdModel.Command.Nonce))
                cmdModel.Command.Nonce = DateTime.UtcNow.ToLongDateString().HashEncoded();
            
            if (_editorInitialized)
                await JS.InvokeVoidAsync("window.setEditorCode", cmdModel?.Command?.Payload?.Exec?.Code);
        }
    }

    private async void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        await Synchronize();
    }

    private async Task CheckForNewCode()
    {
        var editorCode = await JS.InvokeAsync<string>("window.getEditorCode");

        if (cmdModel.Command.Payload.Exec.Code != editorCode)
        {
            cmdModel.Command.Payload.Exec.Code = editorCode;
            await Synchronize();
            StateHasChanged();
        }
    }

    private async Task Synchronize()
    {
        await Task.Run(cmdModel.UpdateHash);
        await Task.Run(StateHasChanged);
    }

    private async Task ApplySignatures()
    {
        await Task.Run(delegate
        {
            for (int i = 0; i < signingKeypairs.Length; i++)
            {
                var keypair = signingKeypairs[i];
                if (keypair == null)
                    continue;

                cmdModel.Signatures[i].Signature = keypair.Sign(cmdModel).ToHexString();
            }
        });
    }

    private void RemoveAppliedSignatures()
    {
        for (int i = 0; i < signingKeypairs.Length; i++)
        {
            var keypair = signingKeypairs[i];
            if (keypair == null)
                continue;

            cmdModel.Signatures[i].Signature = "";
        }
    }

    protected async Task SendTransaction()
    {
        inputEnabled = false;
        StateHasChanged();

        await Synchronize();
        await ApplySignatures();
        _sentCommand = JsonSerializer.Deserialize<PactCommand>(cmdModel.JsonEncodedForLocal, PactClient.PactJsonOptions);
        _sentCommand.SetCommand(_sentCommand.CommandEncoded);
        var resp = await _pactClient.SendTransactionAsync(cmdModel);
        
        RemoveAppliedSignatures();
        resultsText = resp;
        StateHasChanged();

        inputEnabled = true;
        StateHasChanged();
    }

    protected async Task PreviewTransaction()
    {
        inputEnabled = false;
        StateHasChanged();

        await Synchronize();
        await ApplySignatures();
        
        var resp = await _pactClient.ExecuteLocalAsync(cmdModel);

        if (resp == null)
        {
            resultsText = "Execution returned null.";
        }
        else
        {
            if (resp.Result.Status != "success")
            {
                resultsText = $"Execution was unsuccessful.\n" +
                              resp.Result.Error.Message + "\n" +
                              resp.Result.Error.Info + "\n" +
                              string.Join('\n', resp.Result.Error.CallStack) + "\n" +
                              resp.Result.Error.Type;
            }
            else
            {
                resultsText = JsonSerializer.Serialize(resp.Result.Data, humanReadableSerializationOptions);
            }
        }
        RemoveAppliedSignatures();
        StateHasChanged();

        inputEnabled = true;
        StateHasChanged();
    }

    public class ImportModel
    {
        public string RequestKey { get; set; }
        public string ChainId { get; set; }
        public string Json { get; set; }
        public string Yaml { get; set; }
    }

    public enum ImportType
    {
        Json, Yaml, RequestKey
    }
}