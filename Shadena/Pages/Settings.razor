@page "/Settings"
@using Microsoft.AspNetCore.Components
@using PactSharp
@using PactSharp.Services
@using PactSharp.Types

@inject PactClient _pactClient
@inject ISettingsService _settingsManager
@inject NavigationManager _navigationManager

<div class="container">
<h2>Settings</h2>

<EditForm Model="settingsModel" OnValidSubmit="@SaveSettings">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <h4>Network settings</h4>
    <div class="mb-3">
        <InputSelect class="form-select" @bind-Value="settingsModel.Network">
            <option value="@Network.Mainnet">Mainnet</option>
            <option value="@Network.Testnet">Testnet</option>
            <option value="@Network.Local">Local Pact server at localhost:8080</option>
        </InputSelect>
    </div>
    <h4>Tokens</h4>

    <div class="mb-3">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="fungible-v2 module name" @bind="addTokenName"/>
            <button class="btn btn-sm btn-outline-primary" type="button" onclick="@AddToken"><span class="oi oi-plus" aria-hidden="true"></span> Add</button>
        </div>
        <TableTemplate Items="settingsModel.Tokens" Context="token">
            <RowTemplate>
                <td class="align-middle">@token</td>
                <td class="col-2">
                    <button class="btn btn-sm btn-outline-danger" type="button" @onclick="@(e => RemoveToken(token))">
                        <span class="oi oi-minus" aria-hidden="true"></span> Remove
                    </button>
                </td>
            </RowTemplate>
        </TableTemplate>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary" type="submit"><span class="oi oi-check" aria-hidden="true"></span> Save</button>
    </div>
</EditForm>
</div>
@code {
    protected SettingsModel settingsModel = new SettingsModel();
    protected string? addTokenName { get; set; }
    
    protected override void OnInitialized()
    {
        LoadSettings();
    }

    protected void AddToken()
    {
        settingsModel.Tokens.Add(addTokenName);
        addTokenName = "";
        StateHasChanged();
    }

    protected void RemoveToken(string tokenName)
    {
        settingsModel.Tokens.Remove(tokenName);
        StateHasChanged();
    }

    protected async Task SaveSettings()
    {
        await _settingsManager.SaveSettingsAsync(settingsModel);
        Console.WriteLine("Saved settings");
        
        _pactClient.SetNetwork(settingsModel.Network);
        
        await LoadSettings();
        _navigationManager.NavigateTo(_navigationManager.Uri);
    }

    protected async Task LoadSettings()
    {
        settingsModel = await _settingsManager.GetSettingsAsync();
        StateHasChanged();
    }
    
}