@page "/ShowBalance"

@using PactSharp
@using PactSharp.Services
@using PactSharp.Types
@implements IDisposable

@inject PactClient _pactClient
@inject IAccountsManager _accountsManager
@inject IChainwebQueryService _chainwebQueryService
@inject ISettingsService _settingsService
@inject NavigationManager _navigationManager

<div class="container @(_loading ? "loading" : "")" style="">
    
    <button class="btn btn-success" type="button" @onclick="@(e => RefreshBalance(true))"><span class="oi oi-reload"></span> Refresh</button>
    <NavLink class="btn btn-primary" href="ManageAccounts">
        <span class="oi oi-people" aria-hidden="true"></span> Manage accounts
    </NavLink>
    
    @foreach (var account in AccountList.Keys)
    {
        <AccountDisplay Accounts="@AccountList[account]" Tokens="@_tokens" AccountName="@account"/>
    }
</div>

@code {
    protected Dictionary<string, List<FungibleV2Account>> AccountList { get; set; } = new();

    private string[] _tokens = Array.Empty<string>();
    bool _loading;
    
    protected override async Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += HandleLocationChanged;
        await _chainwebQueryService.Initialize();
        await RefreshBalance();
    }

    private async Task RefreshBalance(bool ignoreCache = false)
    {
        _loading = true;
        StateHasChanged();
        
        var settings = await _settingsService.GetSettingsAsync();
        var accountsList = (await _accountsManager.GetAccountsRegisteredAsync()).ToArray();
        _tokens = settings.Tokens.ToArray();

        foreach (var account in accountsList)
        {
            if (!AccountList.ContainsKey(account.Name))
                AccountList[account.Name] = new List<FungibleV2Account>();
            else
                AccountList[account.Name].Clear();
        }

        StateHasChanged();

        var accountsFetched = await _chainwebQueryService.GetAccountDetailsAsync(_tokens, accountsList, ignoreCache);

        foreach (var account in accountsFetched)
            AccountList[account.Account].Add(account);
        
        StateHasChanged();
        _loading = false;
    }
    
    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (e.Location.Contains("ShowBalance"))
            await RefreshBalance();
    }

    public void Dispose()
    {
        _navigationManager.LocationChanged -= HandleLocationChanged;
    }
}
