@using Microsoft.AspNetCore.Components
@using PactSharp
@using PactSharp.Types
@using System.ComponentModel.DataAnnotations
@using Chaos.NaCl
@using Microsoft.AspNetCore.WebUtilities

@inject IKeypairManager _keypairManager

<div class="mb-3">
    <label>Signatures <span class="fas fa-info-circle fa-xs" style="opacity:0.8;" data-bs-trigger="hover focus click" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" 
                            title="For each signer, provide a signature of the transaction hash. <span class='font-monospace'>pact sign</span> is one way to obtain a signature."></span></label>
    
    @{
        var signersCopied = Transaction?.Command?.Signers?.ToArray() ?? Array.Empty<PactSigner>();
        var signaturesCopied = Transaction?.Signatures?.ToArray() ?? Array.Empty<PactSignature>();
        if (!signersCopied.Any())
        {
            <p><small>No signers have been added yet.</small></p>
        }
        int i = 0;
        foreach (var signer in signersCopied)
        {
            var signerIndex = i++;

            if (Transaction.Signatures == null || SigningKeypairs == null || signerIndex >= signaturesCopied.Length)
                continue;

            bool signatureHasKeypair = signerIndex < keypairAvailable.Length && keypairAvailable[signerIndex];
            bool signatureLockedWithKeypair = signerIndex < SigningKeypairs.Length && SigningKeypairs[signerIndex] != null;
            
            <div class="input-group">
                <input type="text" class="form-control" readonly=@signatureLockedWithKeypair @bind="signaturesCopied[signerIndex].Signature" 
                       placeholder="@(signatureLockedWithKeypair ? $"Automatically signed by {signer.PubKey}" : $"Enter signature from {signer.PubKey}")"
                       oninput="@FixIncomingSignature(signerIndex)"/>
                @{
                    if (signatureHasKeypair)
                    {
                        <button class="btn @(signatureLockedWithKeypair ? "btn-primary" : "btn-outline-primary") btn-sm" type="button"
                                 data-bs-trigger="hover focus click" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-html="true" 
                                                                                                                 title="Sign automatically"
                                @onclick="@(() => ToggleAttached(signer))"><span class="oi oi-lock-locked" aria-hidden="true"></span></button>
                    }
                }
            </div>
        }
    }
</div>

@code {
    [Required]
    [Parameter]
    public PactCommand Transaction { get; set; }
  
    [Parameter]
    public EventCallback SignaturesChanged { get; set; }
    
    async Task SignalUpdate() => await SignaturesChanged.InvokeAsync();

    [Parameter]
    public PactKeypair[] SigningKeypairs { get; set; } = new PactKeypair[0];
    
    [Parameter]
    public EventCallback<PactKeypair[]> SigningKeypairsChanged { get; set; }
    
    bool[] keypairAvailable = new bool[0];

    List<PactKeypair> keypairs;
    string[] prevSignatures = new string[0];

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        
        keypairs = (await _keypairManager.GetKeypairsAsync()).ToList();
        await SynchronizeNumberAsync();
    }

    private async Task FixIncomingSignature(int index)
    {
        if (Transaction?.Command != null && Transaction.Command.Signers != null && Transaction.Command.Signers.Count == Transaction.Signatures?.Length)
        {
            var signature = Transaction.Signatures[index];

            if (prevSignatures.Length > index && signature.Signature == prevSignatures[index])
                return;

            if (signature.Signature?.Length != 128)
            {
                //Console.WriteLine($"Wrong signature length {signature.Signature.Length}");
                return;
            }
            
            var hash = Base64UrlTextEncoder.Decode(Transaction.Hash);
            var signerAtLocation = Transaction.Command.Signers[index];
            var pubkey = signerAtLocation.PubKey.ToByteArray();
            var signatureBytes = signature.Signature?.ToByteArray() ?? new byte[0];

            var prevSignature = prevSignatures[index];
            prevSignatures[index] = signature.Signature;

            if (Ed25519.Verify(signatureBytes, hash, pubkey))
            {
                //Console.WriteLine($"Signature match");
                return;
            }

            for (int i = 0; i < Transaction.Command.Signers.Count; i++)
            {
                if (i == index)
                    continue;

                var possibleSigner = Transaction.Command.Signers[i];
                var possibleSignerPubkey = possibleSigner.PubKey.ToByteArray();

                if (Ed25519.Verify(signatureBytes, hash, possibleSignerPubkey))
                {
                    //Console.WriteLine($"Signature actually belongs to {possibleSigner.PubKey}");
                    if (SigningKeypairs[i] == null)
                    {
                        Transaction.Signatures[i] = new PactSignature(signature.Signature ?? "");
                        Transaction.Signatures[index] = prevSignature == null ? new PactSignature() : new PactSignature(prevSignature);
                        prevSignatures[index] = prevSignature;
                        StateHasChanged();
                    }
                    return;
                }
            }
            
            //Console.WriteLine($"Signature mismatch");
        }
    }

    public async Task ToggleAttached(PactSigner signer)
    {
        var index = Transaction?.Command?.Signers?.IndexOf(signer) ?? -1;

        if (index == -1)
            return;

        if (SigningKeypairs[index] != null)
        {
            SigningKeypairs[index] = null;
        }
        else if (keypairAvailable[index])
        {
            await Task.Run(delegate
            {
                SigningKeypairs[index] = keypairs.FirstOrDefault(keypair => keypair.PublicKey.ToHexString().Equals(signer.PubKey, StringComparison.InvariantCultureIgnoreCase));
            });
        }

        await SignalUpdate();
        await SynchronizeNumberAsync();
    }

    public async Task SynchronizeNumberAsync()
    {
        if (keypairAvailable.Length == Transaction.Command.Signers.Count && 
            Transaction.Command.Signers.Count == Transaction.Signatures.Length)
            return;
    
        //Console.WriteLine($"Synchronizing signatures {keypairAvailable.Length}, {Transaction.Command.Signers.Count}");
    
        var newSigs = new PactSignature[Transaction.Command.Signers.Count];
        var newKeypairs = new PactKeypair[newSigs.Length];
        var newKeypairAvailable = new bool[newSigs.Length];
        var newPrevSignatures = new string[newSigs.Length];
        
        for (int i = 0; i < newSigs.Length; i++)
        {
            newSigs[i] = new PactSignature();
            newKeypairs[i] = null;
            newKeypairAvailable[i] = false;
        }
        
        for (int i = 0; i < Math.Min(newSigs.Length, Transaction.Signatures.Length); i++)
        {
            newSigs[i] = Transaction.Signatures[i];
            newKeypairs[i] = SigningKeypairs.Length > i ? SigningKeypairs[i] : null;
        }
        
        Array.Copy(prevSignatures, newPrevSignatures, Math.Min(prevSignatures.Length, newPrevSignatures.Length));

        await Task.Run(delegate
        {
            for (int i = 0; i < newSigs.Length; i++)
            {
                newKeypairAvailable[i] = keypairs.Any(keypair => keypair.PublicKey.ToHexString().Equals(Transaction.Command.Signers[i].PubKey, StringComparison.InvariantCultureIgnoreCase));
            }
        });

        Transaction.Signatures = newSigs;
        SigningKeypairs = newKeypairs;
        keypairAvailable = newKeypairAvailable;
        prevSignatures = newPrevSignatures;

        await SigningKeypairsChanged.InvokeAsync(SigningKeypairs);
        StateHasChanged();
    }

}