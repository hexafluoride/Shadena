@using Microsoft.AspNetCore.Components
@using PactSharp
@using PactSharp.Types

@inject IKeypairManager _keypairManager

@if (Editable)
{
    <div class="input-group">
        <input type="text" class="form-control" name="signer-pubkey" placeholder="Public key" @bind="newSignerName" list="pubkey-list"/>
        <datalist id="pubkey-list">
            @foreach (var keypair in keypairs)
            {
                <option value="@keypair.PublicKey.ToHexString()">@keypair.PublicKey.ToHexString()</option>
            }
        </datalist>
        <button class="btn btn-sm btn-outline-primary" type="button" onclick="@AddSigner"><span class="oi oi-plus" aria-hidden="true"></span> Add signer</button>
    </div>
}
<TableTemplate Items="@Signers" Context="signer" >
    <RawRowTemplate>
        <tr>
            <td class="align-middle text-wrap address-display">@signer.PubKey</td>
            @if (Editable)
            {
                <td class="col-2">
                    <button class="btn btn-sm btn-outline-danger" type="button" @onclick="@(e => RemoveSigner(signer))">
                        <span class="oi oi-minus" aria-hidden="true"></span> Remove
                    </button>
                </td>
            }
        </tr>
        @if (Editable || signer.Capabilities?.Any() == true)
        {
            <tr>
                <td>
                    <div class="container-fluid">
                        @if (Editable)
                        {
                            <div class="input-group">
                                <input type="text" class="form-control" name="signer-capability" placeholder="(free.example.CAPABILITY 'arg1 'arg2 3.0)" @bind="newCapabilityContents"/>
                                <button class="btn btn-sm btn-outline-primary" type="button" @onclick="@(e => AddCapability(signer))"><span class="oi oi-plus" aria-hidden="true"></span> Add capability</button>
                            </div>
                        }
                        @if (Editable || signer.Capabilities?.Any() == true)
                        {
                            <TableTemplate Items="@signer.Capabilities" Context="capability" Classes="table-sm table-secondary">
                                <TableHeader>
                                    @if (!Editable)
                                    {
                                        <small style="background-color: transparent;">CAPABILITIES</small>
                                    }
                                </TableHeader>
                                <RowTemplate>
                                    <td class="align-middle text-wrap font-monospace"><small>@capability</small></td>
                                    @if (Editable)
                                    {
                                        <td class="col-2">
                                            <button class="btn btn-sm btn-outline-danger" type="button" @onclick="@(e => RemoveCapability(signer, capability))">
                                                <span class="oi oi-minus" aria-hidden="true"></span> Remove
                                            </button>
                                        </td>
                                    }
                                </RowTemplate>
                            </TableTemplate>
                        }
                    </div>
                </td>
            </tr>
        }
    </RawRowTemplate>
</TableTemplate>

@code {
    string newSignerName = "";
    string newCapabilityContents = "";

    List<PactKeypair> keypairs { get; set; } = new();

    [Parameter]
    public bool Editable { get; set; } = true;
    
    [Parameter]
    public List<PactSigner> Signers { get; set; }
    
    [Parameter]
    public EventCallback SignersChanged { get; set; }

    async Task SignalUpdate() => await SignersChanged.InvokeAsync();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        keypairs = (await _keypairManager.GetKeypairsAsync()).ToList();
        StateHasChanged();
    }

    async Task AddSigner()
    {
        if (string.IsNullOrWhiteSpace(newSignerName))
            return;
        
        Signers.Add(new PactSigner(newSignerName));
        newSignerName = "";
        await SignalUpdate();
    }

    async Task AddCapability(PactSigner signer)
    {
        if (string.IsNullOrWhiteSpace(newCapabilityContents))
            return;

        var newCap = PactCapability.FromString(newCapabilityContents);
        
        if (newCap != null)
            signer.Capabilities.Add(newCap);
        
        newCapabilityContents = "";
        await SignalUpdate();
    }

    async Task RemoveSigner(PactSigner signer)
    {
        Signers.Remove(signer);
        await SignalUpdate();
    }

    async Task RemoveCapability(PactSigner signer, PactCapability capability)
    {
        signer.Capabilities.Remove(capability);
        await SignalUpdate();
    }
}