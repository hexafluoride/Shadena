@using PactSharp.Types
@using PactSharp.Services
@using PactSharp
@using System.Timers
@using System.ComponentModel.DataAnnotations

@inject PactClient _pactClient
@inject IChainwebQueryService _chainwebQueryService
@inject NavigationManager _navigationManager

<div class="container-fluid @(_loading ? "loading" : "")">
    <div class="row row-cols-auto align-content-center">
        @if (!string.IsNullOrWhiteSpace(_targetRequestKey))
        {
            <div class="col">
                <small class="me-1">REQUEST KEY</small>
                @if (_commandResponse == null)
                {
                    <span class="badge bg-secondary">Unknown</span>
                }
                else if (_commandResponse.Result.Status != "success")
                {
                    <span class="badge bg-danger">Failure</span>
                }
                else
                {
                    <span class="badge bg-success">Success</span>
                }
                <pre>@_targetRequestKey</pre>
            </div>
        }
        @if (_commandResponse != null)
        {
            <div class="col">
                <small>STATUS</small>
                <pre>@_commandResponse.Result.Status</pre>
            </div>
            <div class="col">
                <small>GAS CONSUMED</small>
                <pre>@_commandResponse.Gas</pre>
            </div>

            @if (_commandResponse.Metadata != null)
            {
                <div class="col">
                    <small>BLOCK TIME</small>
                    <pre>@DateTime.UnixEpoch.AddMilliseconds(_commandResponse.Metadata.BlockTime / 1000d)</pre>
                </div>
                <div class="col">
                    <small>BLOCK HASH</small>
                    <pre>@_commandResponse.Metadata.BlockHash</pre>
                </div>

                @if (_command?.Command?.Metadata != null)
                {
                    var publicMeta = _command.Command.Metadata;

                    <div class="col">
                        <small>SENDER</small>
                        <pre>@publicMeta.Sender</pre>
                    </div>
                    <div class="col">
                        <small>CHAIN</small>
                        <pre>@publicMeta.ChainId</pre>
                    </div>
                    <div class="col">
                        <small>GAS LIMIT</small>
                        <pre>@publicMeta.GasLimit</pre>
                    </div>
                    <div class="col">
                        <small>GAS PRICE</small>
                        <pre>@publicMeta.GasPrice</pre>
                    </div>
                    <div class="col">
                        <small>TIME TO LIVE</small>
                        <pre>@(publicMeta.Ttl)s</pre>
                    </div>
                }
            }
        }
    </div>
    @if (_commandResponse?.Result?.Data != null)
    {
        <div class="row">
            <div class="col">
                <small>RESULT</small>
                <textarea class="form-control" readonly>@(_commandResponse.Result.Data)</textarea>
            </div>
        </div>
    }
    @if (_commandResponse?.Result?.Error != null)
    {
        <div class="row">
            <div class="col">
                <small>ERROR TYPE</small>
                <pre>@(_commandResponse.Result.Error.Type)</pre>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <small>ERROR MESSAGE</small>
                <textarea class="form-control" readonly>@(_commandResponse.Result.Error.Message)</textarea>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <small>STACK TRACE</small>
                <textarea class="form-control" readonly>@(string.Join('\n', _commandResponse.Result.Error.CallStack))</textarea>
            </div>
        </div>
    }
    @if (_commandResponse?.Continuation != null)
    {
        <div class="row">
            <div class="col">
                <small>CONTINUATION CALL</small>
                <table class="table">
                    <thead>
                    <th>arg #</th>
                    <th>data</th>
                    </thead>
                    <tbody>
                    <tr><td>function</td><td><span class="code-display">@_commandResponse.Continuation.Continuation.Def</span></td></tr>
                    @{
                        var i = 0;
                        foreach (var arg in _commandResponse.Continuation.Continuation.Arguments)
                        {
                            <tr><td>@(i++)</td><td><span class="code-display">@arg.ToString()</span></td></tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <small>STEP</small>
                <p>#@(_commandResponse.Continuation.Step + 1) out of @(_commandResponse.Continuation.StepCount) total</p>
            </div>
        </div>
        @if (_commandResponse?.Continuation?.Yield?.Provenance != null)
        {
            <div class="row">
                <div class="col">
                    <small>TARGET CHAIN</small>
                    <pre>@_commandResponse.Continuation.Yield.Provenance.TargetChainId</pre>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <small>TARGET MODULE HASH</small>
                    <pre>@_commandResponse.Continuation.Yield.Provenance.ModuleHash</pre>
                </div>
            </div>
        }
        <div class="row">
            <div class="col">
                <small>TRANSACTION ID</small>
                <pre>@_commandResponse.TransactionId</pre>
            </div>
        </div>
        @if (_commandResponse?.Continuation?.Yield != null)
        {
            <div class="row">
                <div class="col">
                    <small>YIELDED DATA</small>
                    <table class="table">
                        <thead>
                        <th>key</th>
                        <th>value</th>
                        </thead>
                        <tbody>
                        @{
                            foreach (var arg in _commandResponse.Continuation.Yield.Data)
                            {
                                <tr><td><span class="code-display">@arg.Key</span></td><td><span class="code-display">@arg.Value.ToString()</span></td></tr>
                            }
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    }
    @if (_command?.Command?.Payload?.Exec != null)
    {
        <div class="row">
            <div class="col">
                <small>CODE</small>
                <textarea class="form-control" readonly>@(_command.Command.Payload.Exec.Code)</textarea>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <small>DATA</small>
                <textarea class="form-control" readonly>@(_command.Command.Payload.Exec.Data.ToJsonString())</textarea>
            </div>
        </div>
    }
    @if (ReferenceType == TransactionReference.RequestKey && _command != null)
    {
        <div class="row">
            <div class="col">
                <button class="btn btn-primary" type="button" @onclick="Import"><span class="oi oi-account-login" aria-hidden="true"></span> Import into editor</button>
            </div>
        </div>
    }
</div>

@code {

    public enum TransactionReference
    {
        SentCommand,
        PollResponse,
        RequestKey
    }
    
    [Parameter]
    public PactCommandResponse Result { get; set; }
    
    [Parameter]
    public PactCommand Command { get; set; } 
    
    [Parameter]
    public string RequestKey { get; set; }
    
    [Parameter]
    public string ChainId { get; set; }
    
    [Required]
    [Parameter]
    public TransactionReference ReferenceType { get; set; }

    private PactCommand _command;
    private PactCommandResponse _commandResponse;
    private string _targetRequestKey;
    private string _targetChain;

    private Timer _timer;
    private bool _loading = false;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        string nextRequestKey = "";
        string nextChain = "";

        switch (ReferenceType)
        {
            case TransactionReference.PollResponse:
                nextRequestKey = Result?.RequestKey;
                nextChain = Result?.Metadata?.PublicMetadata?.ChainId ?? "0";
                break;
            case TransactionReference.SentCommand:
                nextRequestKey = Command?.Hash;
                nextChain = Command?.Command.Metadata?.ChainId ?? "0";
                break;
            case TransactionReference.RequestKey:
                nextRequestKey = RequestKey;
                nextChain = ChainId;
                break;
        }

        if (_targetRequestKey != nextRequestKey || _targetChain != nextChain)
        {
            _targetRequestKey = nextRequestKey;
            _targetChain = nextChain;
            _command = null;
            _commandResponse = null;
            _timer?.Stop();
            _timer?.Close();
            _timer = null;
        }

        if (string.IsNullOrWhiteSpace(_targetRequestKey))
            return;

        if (!_loading && (_command == null || !_command.Hash.Equals(_targetRequestKey)))
            await Refresh();

        if (_timer == null && _command == null)
        {
            _timer = new Timer(3000);
            _timer.Elapsed += (s, e) => Refresh();
            _timer.Enabled = true;
        }
    }

    private async Task Import()
    {
        _navigationManager.NavigateTo($"/PrepareTransaction/{_targetChain}/{_targetRequestKey}");
    }

    private async Task Refresh()
    {
        _loading = true;
        StateHasChanged();
        if (_commandResponse == null)
            _commandResponse = await _pactClient.PollRequestAsync(_targetChain, _targetRequestKey);

        if (_commandResponse != null && _command == null)
            _command = await _chainwebQueryService.FetchTransactionAsync(_targetChain, _commandResponse.Metadata.BlockHash, _targetRequestKey);

        _loading = false;
        StateHasChanged();

        if (_command != null && _timer != null)
        {
            Console.WriteLine($"Received tx details, stopping refresh");
            _timer.Stop();
            _timer.Close();
        }
    }
}